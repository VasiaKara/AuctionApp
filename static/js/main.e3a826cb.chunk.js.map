{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBid","ContractBalance","highestBidder","accounts","contract","input","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","getContractBalance","call","response","responsee","responseee","setState","alert","error","runBid","bid","send","from","value","bidValue","myChangeHandler","event","target","runWithdraw","withdraw","this","className","type","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3a826cb.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {highestBid:0, ContractBalance: 0, highestBidder: \"None yet\", web3: null, accounts: null, contract: null, input:\"\"};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const response = await instance.methods.getContractBalance().call();\n      const responsee = await instance.methods.highestBid().call();\n      const responseee = await instance.methods.highestBidder().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, highestBid: responsee, ContractBalance: response, highestBidder: responseee });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runBid = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value.\n    await contract.methods.bid().send({ from: accounts[0], value: this.state.bidValue});\n\n    //Get the value from the contract to prove it worked.\n    const response = await contract.methods.getContractBalance().call()\n    const responsee = await contract.methods.highestBid().call()\n    const responseee = await contract.methods.highestBidder().call()\n\n    // Update state with the result.\n    this.setState({ ContractBalance: response });\n    this.setState({ highestBid: responsee });\n    this.setState({ highestBidder: responseee });\n  };\n\n  myChangeHandler = (event) => {\n    this.setState({bidValue: event.target.value}, () => {\n\t//console.log(this.state.bidValue)\n    });\n  }\n\n  runWithdraw = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value.\n    await contract.methods.withdraw().send({ from: accounts[0]});\n\n    //Get the value from the contract to prove it worked.\n    const response = await contract.methods.getContractBalance().call()\n\n    // Update state with the result.\n    this.setState({ ContractBalance: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to our page, join our Auction!</h1>\n        <div>The Contract's Balance is: {this.state.ContractBalance}</div>\n        <br></br>\n        <div>The Highest Bid is: {this.state.highestBid}</div>\n        <br></br>\n        <div>The Highest Bidder is:<br></br> {this.state.highestBidder}</div>\n        <br></br>\n        <div>To make a new bid select:</div>\n        <input type=\"text\" onChange={this.myChangeHandler} />\n        <button onClick={this.runBid}>BID</button>\n        <br></br><br></br>\n\n        <div>To withdraw your money select:</div>\n        <button onClick={this.runWithdraw}>WITHDRAW</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}